// FB Controller for Stage 2 (Machining Center - MC)
// - Machines raw materials into product bases
// - Manage internal state transisitions using a state machine
// - Sets local 'readyForPart' flag to signal upstream to provide raw material
// - All outputs are disabled if GV_Flags.SystemEnabled is FALSE
// - Sets fault flag if raw material doesn't arrive at entrance within time limit, or incorrect material, requires reset by operator
// States:
// - IDLE: Enter WAITING if system is enabled
// - WAITING: Send start signal to the MC, if MC is busy reset 'ReadyForPart' flag and enter RUNNING
// - RUNNING: Enter COMPLETE when MC stops being busy
// - COMPLETE: Set 'ReadyForPart" flag, enter WAITING if system is still on, else IDLE
FUNCTION_BLOCK Stage2_MC
VAR_INPUT	
	iBusy : BOOL;					// Machining Station is currently processing
	iOpened : BOOL;					// CNC door open
	iError : BOOL;					// Non-raw material detected at station entrance
	iProgress : WORD;				// CNC progress (0 - 100)
END_VAR
VAR_OUTPUT
	oStart: BOOL;					// Start signal for MC, starts machining when part is detected at entry
	oStop: BOOL;					// MC Stop signal
	oReset: BOOL;					// MC Reset signal
	oProduceLids: BOOL;				// TRUE: MC produces lids, FALSE: MC produces bases
END_VAR
VAR
	SystemOn : BOOL;						// Local SystemEnable flag
	E_State : E_States := E_States.Idle;	// Initiate to IDLE
	bReadyForPart: BOOL := TRUE; 			// Local flag signals Stage One to provide raw material
	FaultTimer : TON;						// Timer for waiting for parts to arrive
	bTimerOn : BOOL;						// Used to start the fault timer
	
	MC_Controller : FB_MachineCenter;
END_VAR
VAR CONSTANT
	FaultTimeS : TIME := T#15S;
END_VAR


// Check system is enabled
SystemOn := GVL.SystemEnabled;

// Instantiate Machining Center
MC_Controller(
	iBusy := iBusy, 
	iOpened := iOpened, 
	iError := iError, 
	iProgress := iProgress);
	oStart := MC_Controller.oStart;
	oStop := MC_Controller.oStop;
	oReset := MC_Controller.oReset;
	oProduceLids := MC_Controller.oProduceLids;
	
// Set production type (bases)
MC_Controller.bProduceLids := FALSE;

// If material is incorrect or doesn't arrive
FaultTimer(IN := bTimerOn, PT := FaultTimeS);
IF FaultTimer.Q OR iError THEN
	GVL.SystemFault := TRUE;
	FaultTimer(IN := FALSE);	// Reset fault timer
	bTimerOn := FALSE;
END_IF

// Safety stop
IF NOT SystemOn THEN
	E_State := E_States.Idle;
END_IF

CASE E_State OF
	E_States.Idle :
		MC_Controller.bEnable := FALSE;
		IF SystemOn THEN
			E_State := E_States.Waiting;
		END_IF
	E_States.Waiting:	// Wait for MC to start
		MC_Controller.bEnable := TRUE;
		bTimerOn := TRUE;				// Start fault timer
		IF MC_Controller.bBusy THEN
			bTimerOn := FALSE;
			bReadyForPart := FALSE;
			E_State := E_States.Running;
		END_IF
	E_States.Running:
		IF NOT MC_Controller.bBusy THEN
			E_State := E_States.Complete;
		END_IF
	E_States.Complete:
		bReadyForPart := TRUE;
		E_State := E_States.Idle;
END_CASE

PROPERTY ReadyForPart : BOOL
GET
ReadyForPart := isReadyForPart;