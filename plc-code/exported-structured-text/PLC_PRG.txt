PROGRAM PLC_PRG
VAR
	Operator : FB_OperatorPanel;
	Stage1 : Stage1_PartDetection;
	Stage2 : Stage2_MC;
	Stage3 : Stage3_Assembly;
END_VAR


// Map IO to Function Blocks
// Operator panel
Operator(
	StartButton := GV_IO.iStartButton, 
	StopButton := GV_IO.iStopButton,
	ResetButton := GV_IO.iResetButton,
	Fault := GVL.SystemFault,
	eStopButton := GV_IO.iEmergencyStopButton);
	
GV_IO.oProcessOnLight := Operator.ProcessOn;
GV_IO.oStopButtonLight := Operator.ProcessOn;
GV_IO.oResetButtonLight := Operator.ResetButtonLight;
GV_IO.oStartButtonLight := Operator.StartButtonLight;

GVL.SystemFault := Operator.SystemFault;
GVL.SystemEnabled := Operator.ProcessOn;

// Process timer
ProcessTimer(iRun := GVL.SystemEnabled);

// Stage 1 - Part Detection and Processing
Stage1(
	iVisionSensorBit0 := GV_IO.iBaseVisionSensorBit0,
	iVisionSensorBit1 := GV_IO.iBaseVisionSensorBit1,
	iVisionSensorBit2 := GV_IO.iBaseVisionSensorBit2,
	iVisionSensorBit3 := GV_IO.iBaseVisionSensorBit3,
	iPusherBackLimit := GV_IO.iBasePusherBackLimit,
	iPusherFrontLimit := GV_IO.iBasePusherFrontLimit,
	iPusherEntrySensor := GV_IO.iBaseDiffuseSensor);
	
GV_IO.oBasePusher := Stage1.oPusher;
GV_IO.oStageOneConveyor := Stage1.oConveyor;

// Stage 2 - Machining Center
Stage2(
	iBusy := GV_IO.iMC_Busy,
	iOpened := GV_IO.iMC_Opened, 
	iError := GV_IO.iMC_Error, 
	iProgress := GV_IO.iMC_Progress);
	
GV_IO.oMC_ProduceLids := Stage2.oProduceLids;
GV_IO.oMC_Reset := Stage2.oReset;
GV_IO.oMC_Start := Stage2.oStart;
GV_IO.oMC_Stop := Stage2.oStop;

// Pass Ready flag to Stage 1
Stage1(iStage2Ready := Stage2.ReadyForPart);

// Stage 3 - Assembly
Stage3(
	iLidAtClampEntry := GV_IO.iLidAtPositioner, 
	iBaseAtClampEntry := GV_IO.iBaseAtPositioner, 
	iExitSensor := GV_IO.iContainerAtExit, 
	iLidClampLimit := GV_IO.iLidPositionerLimit, 
	iBaseClampLimit := GV_IO.iBasePositionerLimit, 
	iLidClamped := GV_IO.iLidPositionerClamped, 
	iBaseClamped := GV_IO.iBasePositionerClamped,
	iAssemPartDetected := GV_IO.iPaPPartDetected, 
	iAssemIsMovingX := GV_IO.iPaPMovingX, 
	iAssemIsMovingZ := GV_IO.iPaPMovingZ);
	
GV_IO.oLidConveyor := Stage3.oLidConveyor;
GV_IO.oBaseConveyor := Stage3.oBaseConveyor;
GV_IO.oLidPositionerClamp := Stage3.oLidClamp;
GV_IO.oBasePositionerClamp := Stage3.oBaseClamp;
GV_IO.oLidPositionerRaise := Stage3.oLidPositionerRaise;
GV_IO.oBasePositionerRaise := Stage3.oBasePositionerRaise;
GV_IO.oPaPX := Stage3.oAssemMoveX;
GV_IO.oPaPZ := Stage3.oAssemMoveZ;
GV_IO.oPaPGrab := Stage3.oAssemGrab;